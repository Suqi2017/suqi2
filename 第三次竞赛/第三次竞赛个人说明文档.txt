1.本次竞赛识别验证码任务，在前期是感觉头太大，没有多少办法，后来就通过一些网上查询，和周围同学们的交流，对这次任务有了一定的想法，
   再后来我就盘算着用什么样的算法来训练我的训练集，经过一番的比较思考和查询，最终我选择了卷积神经网络，因为此次的验证码识别和我们现在
   所做的汉字识别项目有很大的相通性，我们的汉字识别项目就是用的卷积神经网络，这样可以减少了一些我们不必要的麻烦与弯路。


过程：
2.在这次识别验证码任务中
第一步我是想训练我们的训练集，所以我就直接的调用了我们的卷积神经网络，也没有做过多的改动，
首先，训练的话，是对训练集的操作，
把一整张图片分为5个小label，而每一个label都有一个数组或字母，在由此来训练这些个label，其次，把label中的字符先转换成ascll码
，然后把ascll码转换成字符串，而后在进行操作训练，并把训练的结果保存下来。
避免下次再测试的话还要花费大量的时间来训练，这样的话，下次测试就可以直接的调用训练结果，从而节省大量的时间
3.验证码的识别测试
我是直接把测试集路径读取进来，在调取前面保存好的训练结果来预测，并保存的


问题思考及解决方法：
4.在此次竞赛的过程中，也出现了很多问题：
其一：我们的电脑自身的运行内存的问题，因为我torch下载的是cpu版本，所以，在运行就报出了此类问题
raise RuntimeError('Attempting to deserialize object on a CUDA '

RuntimeError: Attempting to deserialize object on a CUDA
 device but torch.cuda.is_available() is False. If you are 
running on a CPU-only machine, please use torch.load
 with map_location=torch.device('cpu') to map your storages to the CPU.
结果一系列的查找，后来找到了解决的方法，即：
        原来读取下载训练集结果的语句是是cnn.load_state_dict(torch.load(model_path)['model_state_dict'])
        改成    cnn.load_state_dict(torch.load(model_path,map_location='cpu')['model_state_dict'])
问题就解决了
其二再接着做，真正的运行预测的时候，电脑内存一直爆满，根本出不来结果，
那我就只能另想他法了，在和同学的交流和老师的探讨，得出了一种可行的方法，就是让预测集分批次进入预测，
由此，我修改了一下代码，再运行时，终于效果好了许多，接着改，让每次进入的很少，多进入几次，这样运行速度明显的提高了
其三结果是能出来了，识别率还不太高，因为是基于卷积神经网络，所以我又继续继续在修改，调试一些参数，例如：
img_tensor = T.Compose([
                    T.Resize((130, 64)), #此处的数字可以尝试改变修改来调试，我是尝试了128，120，130等一系类数字
                    T.ToTensor(),
                    T.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
                    ])
其四就是此次竞赛对我们正在进行的汉字识别项目有了又进一步的了解与认识，我的此次作业完成有很大一部分是基于已完成的汉字识别来写的，
所以说，










